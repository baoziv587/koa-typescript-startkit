declare module 'koa-helmet' {
  function helmet(): any
  export =helmet
}

declare module 'koa-morgan' {
  function morgan(...args): any
  export =morgan
}



declare module 'koa-generic-session' {
  /**
   * 
    After adding session middleware, you can use this.session to set or get the sessions.
    Setting this.session = null; will destroy this session.
    Altering this.session.cookie changes the cookie options of this user. Also you can use the cookie options in session the store. Use for example cookie.maxage as the session store's ttl.
    Calling this.regenerateSession will destroy any existing session and generate a new, empty one in its place. The new session will have a different ID.
    Setting this.sessionSave = true will force saving the session regardless of any other options or conditions.
    Setting this.sessionSave = false will prevent saving the session regardless of any other options or conditions.
    Options
    
    key: cookie name defaulting to koa.sid
    prefix: session prefix for store, defaulting to koa:sess:
    ttl: ttl is for sessionStore's expiration time. it is different with cookie.maxage, default to null(means get ttl from cookie.maxage).
    rolling: rolling session, always reset the cookie and sessions, defaults to false
    genSid: default sid was generated by uid2, you can pass a function to replace it
    defer: defers get session, only generate a session when you use it through var session = yield this.session;, defaults to false
    allowEmpty: allow generation of empty sessions
    errorHandler(err, type, ctx): Store.get and Store.set will throw in some situation, use errorHandle to handle these errors by yourself. Default will throw.
    reconnectTimeout: When store is disconnected, don't throw store unavailable error immediately, wait reconnectTimeout to reconnect, default is 10s.
    sessionIdStore: object with get, set, reset methods for passing session id throw requests.
    valid: valid(ctx, session), valid session value before use it
    beforeSave: beforeSave(ctx, session), hook before save session
    store: session store instance. It can be any Object that has the methods set, get, destroy like MemoryStore.
    cookie: session cookie settings, defaulting to
    {
      path: '/',
      httpOnly: true,
      maxage: null,
      rewrite: true,
      signed: true
    }
    For a full list of cookie options see expressjs/cookies.
    
    if you setcookie.maxage to null, meaning no "expires" parameter is set so the cookie becomes a browser-session cookie. When the user closes the browser the cookie (and session) will be removed.
    
    Notice that ttl is different from cookie.maxage, ttl set the expire time of sessionStore. So if you set cookie.maxage = null, and ttl=ms('1d'), the session will expired after one day, but the cookie will destroy when the user closes the browser. And mostly you can just ignore options.ttl, koa-generic-session will parse cookie.maxage as the tll.
  */

  function genSession(...args): any
  export =genSession
}

declare module 'koa-convert' {
  function convert(...args): any
  export =convert
}

declare module 'koa-bodyparser' {
  function bodyparser(...args)
  export =bodyparser
}

declare module 'koa-csrf' {
  interface options {
    invalidSessionSecretMessage?: string
    invalidSessionSecretStatusCode?: number
    invalidTokenMessage?: string
    invalidTokenStatusCode?: number
    excludedMethods?: string[]
    disableQuery?: boolean
  }
  class CSRF {
    constructor(opts: options)
  }
  export default CSRF
}